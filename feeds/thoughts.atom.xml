<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Siv Scripts - Thoughts</title><link href="http://alysivji.github.io/" rel="alternate"></link><link href="http://alysivji.github.io/feeds/thoughts.atom.xml" rel="self"></link><id>http://alysivji.github.io/</id><updated>2017-11-18T17:30:00-06:00</updated><entry><title>Soaking it in</title><link href="http://alysivji.github.io/life-sponge.html" rel="alternate"></link><published>2017-11-18T17:30:00-06:00</published><updated>2017-11-18T17:30:00-06:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-11-18:/life-sponge.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Truly wonderful the mind of a child is&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was an action packed week at work: we migrated our infrastructure to the Google Cloud Platform and into Kubernetes. Pods, nodes, deployments. &lt;em&gt;Oh my!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not that I helped much with the migration; I'm new and still learning the ropes.&lt;/p&gt;
&lt;p&gt;I know …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Truly wonderful the mind of a child is&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It was an action packed week at work: we migrated our infrastructure to the Google Cloud Platform and into Kubernetes. Pods, nodes, deployments. &lt;em&gt;Oh my!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not that I helped much with the migration; I'm new and still learning the ropes.&lt;/p&gt;
&lt;p&gt;I know it's a tech cliché, but there is &lt;strong&gt;so much&lt;/strong&gt; to learn! Feels like something new is coming out every single day.&lt;/p&gt;
&lt;p&gt;Just finished &lt;a href="https://twitter.com/nigelpoulton"&gt;Nigel Poulton&lt;/a&gt;'s &lt;a href="https://www.pluralsight.com/courses/getting-started-kubernetes"&gt;Getting Started with Kubernetes&lt;/a&gt; course on PluralSight. Great introduction to the topic, I highly recommend it! Also planning on digging into &lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes the Hard Way&lt;/a&gt; the day after I hand in my final paper in early-December.&lt;/p&gt;
&lt;p&gt;So that I have an interesting use case, I've spent some time thinking of side project ideas. Nothing complex, but enough moving pieces to help me understand the basics of Google Cloud. Need to build something beyond the limit of my current abilities, it's the only way to grow.&lt;/p&gt;
&lt;p&gt;Speaking of which. I've started building out a &lt;a href="https://falconframework.org/"&gt;Falcon&lt;/a&gt;-based backend as a fun little practice project. Being fairly new to the web development game, the project is coming along slowly. Fortunately, one of the Senior Engineers at work has been helping me out by conducting informal code reviews to make sure I'm on the right track. What. A. Guy. I can't describe how great it is to have somebody to bounce my ideas off of and to help me solidify my understanding.&lt;/p&gt;
&lt;p&gt;Lots of reading on my own time so I have "intelligent" questions to ask. I think this is key.&lt;/p&gt;
&lt;p&gt;Making an effort and showing others that you are willing to put in the work required to learn complex concepts makes a huge difference in how you are perceived. Having the right attitude indicates you are worth investing time in. If people see that you care, they will start to care and become invested in your learning. Pretty soon you'll have a network of folks smarter than you who are willing to impart the occasional wisdom your way.&lt;/p&gt;
&lt;p&gt;This does not have to be an &lt;a href="https://www.urbandictionary.com/define.php?term=IRL"&gt;IRL&lt;/a&gt; mentor-mentee relationship, it could be somebody you reach out to online. People want to be surrounded by other passionate individuals who are interested in the same things they are.&lt;/p&gt;
&lt;p&gt;When I look back at my interview process, it was my enthusiasm (and knowledge of healthcare) that got me the job. I wasn't hired for my web development experience, it was about everything else I brought to the table.&lt;/p&gt;
&lt;p&gt;Stating that, there is an unspoken agreement between my employer and myself that I will have to figure out how to do my job and how to do it well.&lt;/p&gt;
&lt;p&gt;I'm doing my part. It's what's expected of me.&lt;/p&gt;
&lt;p&gt;Also because &lt;a href="https://www.youtube.com/watch?v=-B3tsUgBRbE"&gt;service guarantees citizenship&lt;/a&gt;.&lt;/p&gt;</content><category term="c'est-la-vie"></category></entry><entry><title>First Month as a Professional Developer</title><link href="http://alysivji.github.io/life-detour.html" rel="alternate"></link><published>2017-11-04T10:00:00-05:00</published><updated>2017-11-04T10:00:00-05:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-11-04:/life-detour.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The best laid schemes o' mice an' men&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Gang aft agley&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started a new job as a Mathematician / Software Engineer at a Chicago-based healthcare startup in October. It's my first &lt;em&gt;proper&lt;/em&gt; development job and I could not be more excited.&lt;/p&gt;
&lt;p&gt;I get paid to write code. It's pretty awesome …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The best laid schemes o' mice an' men&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Gang aft agley&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started a new job as a Mathematician / Software Engineer at a Chicago-based healthcare startup in October. It's my first &lt;em&gt;proper&lt;/em&gt; development job and I could not be more excited.&lt;/p&gt;
&lt;p&gt;I get paid to write code. It's pretty awesome.&lt;/p&gt;
&lt;p&gt;Had always thought I would work in data, maybe transition into a data engineer role. But here we are. I'm working on a team of ~10 developers building a &lt;a href="https://www.healthit.gov/policy-researchers-implementers/clinical-decision-support-cds"&gt;clinical decision support&lt;/a&gt; web application.&lt;/p&gt;
&lt;p&gt;Guess this change isn't entirely out of left field; I had started to dig deeper into software engineering best practices over the past few months. Became fascinated by the different methodologies and frameworks that facilitate the production of good code. As a self-taught developer, I desired formality. There's only so much I could absorb by reading about other people's experiences and working on open source projects after work.&lt;/p&gt;
&lt;p&gt;I needed to get my hands dirty and get some real world practice writing code as part of a team. Thought it would be good to experience the process-based workflow of a structured Agile/Scrum development environment; to understand the pain of working (&lt;a href="https://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"&gt;effectively&lt;/a&gt;) with legacy code; and to have no choice but to write tests for the code I ship. And, preferrably, have those &lt;a href="https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530"&gt;tests be written first&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's only been a month, but I think I made the right decision. In one of my first commits, I made a change and took time to refactor code to increase readability ala &lt;a href="/review-code-complete.html"&gt;Code Complete&lt;/a&gt;. Got a shoutout during code review. That felt awesome! Software Craftsmanship FTW!&lt;/p&gt;
&lt;p&gt;I will say that I find myself constantly studying after work and on weekends so that I'm not &lt;em&gt;completely&lt;/em&gt; useless, but I wouldn't want it any other way. Coding at the edge of my abilities will increase my skills exponentially.&lt;/p&gt;
&lt;p&gt;While I eventually plan on going back to data, let's hold off thinking about when. Right now I'm enjoying life and want to stay on &lt;a href="http://knowyourmeme.com/memes/mr-bones-wild-ride"&gt;Mr. Bones' Wild Ride&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Mastering Development Tools&lt;/h3&gt;
&lt;p&gt;The main reason I took a backend developer role was to level up my dev chops. This means many different things such as writing clean code, being able to identify and correctly apply design patterns, recognizing anti-patterns (code smells), and, of course, learning the tools of the trade.&lt;/p&gt;
&lt;p&gt;Over the past couple of weeks, I've started transitioning away from the friendly confines of VSCode and iTerm2 into the magical world of &lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt; and &lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt;. Even though I'm fairly proficient with a graphical IDE, I thought it was worth investing in tools that enable me to work as fast as I think.&lt;/p&gt;
&lt;p&gt;By switching to a terminal-only development environment, I hope to reduce the context switching that occurs everytime I reach for my mouse or trackpad. As an added bonus, I can SSH into any machine and feel at home. No more having to set up &lt;a href="https://en.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt; or use &lt;a href="https://www.nano-editor.org/"&gt;nano&lt;/a&gt; as a crutch.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.commitstrip.com/en/2016/12/22/terminal-forever/"&gt;&lt;img src="/images/11-20/18_commit_strip_terminal_forever.jpg" alt="Commit Strip - Terminal Forever" width=650 /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;How I'm Learning Vim&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Worked my way through &lt;code&gt;$ vimtutor&lt;/code&gt;. It's a rite of passage.&lt;/li&gt;
&lt;li&gt;Enabled Vim keybindings in all my text editors (VSCode &amp;amp; Sublime) to get comfortable using the &lt;code&gt;h j k l&lt;/code&gt; movement keys. Being in a familiar environment where I could get work done without having to Google every command did help flatten the learning curve.&lt;/li&gt;
&lt;li&gt;Once I was able to make the cursor go where I wanted, I watched &lt;a href="https://www.youtube.com/watch?v=_NUO4JEtkDw"&gt;Learning Vim in a Week&lt;/a&gt;. Key takeaways:&lt;ul&gt;
&lt;li&gt;Set up a basic &lt;code&gt;.vimrc&lt;/code&gt; file and throw it in Verison Control&lt;ul&gt;
&lt;li&gt;My &lt;a href="https://github.com/alysivji/dotfiles"&gt;dotfile repo&lt;/a&gt; - Warning: Use at your own risk 😜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remap [CapsLock] to [Esc]&lt;ul&gt;
&lt;li&gt;I went a &lt;a href="https://twitter.com/CaiusSivjus/status/924671391256981504"&gt;step further&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use plugins for development, with included recommendations&lt;ul&gt;
&lt;li&gt;I recommend the &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; plugin manager&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Last weekend, I installed tmux on my home machine so I could start getting familiar with how it works. My &lt;code&gt;.tmux.conf&lt;/code&gt; is very basic, but all the pieces are in place to enable me to learn at my own pace. I just have to make an effort to learn a couple of new things every week. Like everything else in life, it's about putting in the reps.&lt;/p&gt;
&lt;p&gt;You're only as good as your tools so it's worth making an investment into optimizing your workflow. We're developers and we should always be tinkering with the software we use on a daily basis. It doesn't have to be Vim and I'm not suggesting everybody go out and learn it. But do take some time to learn your tools and the plugin ecosystem of your IDE.&lt;/p&gt;
&lt;p&gt;Shoutout to the folks who responded to my &lt;a href="https://twitter.com/CaiusSivjus/status/924619886529253376"&gt;tweet&lt;/a&gt; with helpful suggestions. &lt;a href="http://knowyourmeme.com/memes/events/kevin-durant-mvp-speech"&gt;You Da Real MVPs&lt;/a&gt;!&lt;/p&gt;
&lt;h4&gt;Additional Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimawesome.com/"&gt;List of Vim Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/"&gt;A Quick and Easy Guide to tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/"&gt;Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bugsnag.com/tmux-and-vim/"&gt;tmux and Vim - even better together&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="c'est-la-vie"></category><category term="workflow"></category><category term="vim"></category><category term="terminal"></category></entry><entry><title>Code Complete</title><link href="http://alysivji.github.io/review-code-complete.html" rel="alternate"></link><published>2017-09-22T11:00:00-05:00</published><updated>2017-09-22T11:00:00-05:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-09-22:/review-code-complete.html</id><summary type="html">&lt;p&gt;2017 is the year I became deliberate about my approach to programming. Like most newbie developers, I hacked together spaghetti code around chunks of answers I found on StackOverflow &lt;em&gt;(Praise Be)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I didn't care how I solved the problem, only that it was solved enough to cross off my todo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;2017 is the year I became deliberate about my approach to programming. Like most newbie developers, I hacked together spaghetti code around chunks of answers I found on StackOverflow &lt;em&gt;(Praise Be)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I didn't care how I solved the problem, only that it was solved enough to cross off my todo list.&lt;/p&gt;
&lt;p&gt;By ignoring recommended software development practices such as coding standards, version control, and testing, I ended up making things harder for myself in the long run.&lt;/p&gt;
&lt;p&gt;I worried about introducing bugs everytime I touched the codebase. I couldn't reuse code because my functions and modules were &lt;a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)"&gt;tightly coupled&lt;/a&gt;. It was difficult to wrap my brain around the complexities of large projects with many moving parts.&lt;/p&gt;
&lt;p&gt;Then I discovered &lt;em&gt;Code Complete&lt;/em&gt;. Steve McConnell changed the way I thought about code. He made me realize that the process of doing things &lt;strike&gt;the "right way"&lt;/strike&gt; methodically is a lot more important than simply solving the problem at hand.&lt;/p&gt;
&lt;p&gt;If we break down tasks into manageable components, we can build anything we can imagine.&lt;/p&gt;
&lt;p&gt;Go read &lt;em&gt;Code Complete&lt;/em&gt;. It will change your life the way it changed mine. Doesn't matter if you're a beginner or a seasoned professional, you'll become a better developer just by reading this book.&lt;/p&gt;
&lt;p&gt;In this post, I will summarize the themes of &lt;em&gt;Code Complete&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;h3&gt;Reduce Complexity&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;A primary goal of software design and construction is conquering complexity. The motivation behind many programming practices is to reduce a program’s complexity, and reducing complexity is arguably the most important key to being an effective programmer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we increase the number of things we keep track of, we increase our chances of introducing a bug in our program. If our code is readable, we are more likely to find logic errors.&lt;/p&gt;
&lt;p&gt;Two ways to reduce complexity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use helper functions&lt;/li&gt;
&lt;li&gt;Refactor conditional tests into readable boolean expressions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's easier to read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# okay&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_employees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# better&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_employees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;currently_employed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;currently_employed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Process Matters&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Observing large processes and small processes means pausing to pay attention to how you create software. It’s time well spent. Saying that “code is what matters; you have to focus on how good the code is, not some abstract process” is shortsighted and ignores mountains of experimental and practical evidence to the contrary. Software development is a creative exercise. If you don’t understand the creative process, you’re not getting the most out of the primary tool you use to create software—your brain. A bad process wastes your brain cycles. A good process leverages them to maximum advantage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's about doing things in a way we can best guarantee success. Sure we can create a product that works, but it only works now. What if requirements change? How are we going to handle those changes?&lt;/p&gt;
&lt;p&gt;We are dealing with a living, breathing product. We need to leverage processes that help us handle changes as they arise.&lt;/p&gt;
&lt;p&gt;One of the reasons I love &lt;em&gt;Code Complete&lt;/em&gt; is that it introduced me to the concepts of TDD (Test Driven Development). After years of struggling with regression errors, I finally understood why testing is a large component of proper development methodologies. Tests make our lives easier in the long run.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Reability&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You should go to the effort of writing good code, which you can do once, rather than the effort of reading bad code, which you’d have to do again and again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code is read by humans far more than it is written. Your interpreter or compiler doesn't care if it's clean or messy so write for your audience, i.e. you in six month's time.&lt;/p&gt;
&lt;p&gt;Both of these blocks of code produce the same output, but which one makes more sense?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# bad&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# good&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;employee&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;company_roster&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Program into Your Language, Not in It&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t limit your programming thinking only to the concepts that are supported automatically by your language. The best programmers think of what they want to do, and then they assess how to accomplish their objectives with the programming tools at their disposal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a topic I explored when I dug into &lt;a href="/managing-resources-with-context-managers-pythonic.html"&gt;Context Managers&lt;/a&gt;: doing things a certain way in one language doesn't mean that we should follow the same pattern in another language. When I came into Python from C# and JavaScript, I brought all my habits with me. Instead of looking for a Pythonic solution, I looked for the Python syntax to do things the way I've always done them.&lt;/p&gt;
&lt;p&gt;Always try to use your language of choice idiomatically.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Conventions for Clarity&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The specific way in which ... a question is answered is less important than that it be answered consistently each time. Conventions save programmers the trouble of answering the same questions, making the same arbitrary decisions—again and again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Programming is hard enough. Use style guides and logical variable names to make it easy for yourself and your team. Doing things in a standard way builds competency. Look for best practices and incorporate them into your process.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Program in Terms of the Problem Domain&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Another specific method of dealing with complexity is to work at the highest possible level of abstraction. One way of working at a high level of abstraction is to work in terms of the programming problem rather than the computer science solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keep business logic separate from the underlying implementation. Separate out parts of the project with helper functions, classes, or a REST API.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;This Developer's Life&lt;/em&gt; podcast featured an &lt;a href="http://thisdeveloperslife.com/post/1-0-6-abstraction"&gt;abstraction episode&lt;/a&gt; which discussed how we primarily concern ourselves with the layer we are currently working in. We might need to peel a layer or two from the onion when we encounter problems, but that's more on a need to know basis.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Watch for Warning Signs&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Warning signs in programming alert you to the possibility of problems, but they’re usually not as blatant as a road sign that says “Watch for falling rocks.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Code_smell"&gt;Code smells&lt;/a&gt;. Look out for patterns and symptoms that indicate a deeper problem. I'll dig into this more once I read &lt;a href="https://twitter.com/unclebobmartin"&gt;Uncle Bob&lt;/a&gt;'s &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Iterate, Repeatedly, Again and Again&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The more you iterate in each development activity, the better the product of that activity will be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Iterating to a final product is a great way to build software since we can be sure that early versions of the feature are implemented in a manner that will be used.&lt;/p&gt;
&lt;p&gt;This is also a good approach to life. Iterate your processes, optimize your workflow as you figure things out.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Don't be Religious about Software&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Dogmatic methodologies and high-quality software development don’t mix. Fill your intellectual toolbox with programming alternatives, and improve your skill at choosing the right tool for the job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Always use the best tool for the job at hand. This might require us to learn a new language, tool, technique, or framework. That's okay. As programmers, we are meant to solve problems. Sometimes this requires us to piece together a solution from many different components.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The first few chapters of &lt;em&gt;Code Complete&lt;/em&gt; totally changed the way I look at software development. I've started to approach programming like a craftsman learning a trade. I am but a simple apprentice learning from the masters who have come before me.&lt;/p&gt;
&lt;p&gt;I need to stay humble and realize that I don't know everything, but that I have the ability within me to figure out how to solve problems. Stand on the shoulders of giants. Use design patterns, algorithms, techniques, frameworks, or whatever else makes life easy. Just remember to approach development pragmatically.&lt;/p&gt;
&lt;hr&gt;
&lt;h5&gt;References&lt;/h5&gt;
&lt;p&gt;McConnell, S. (2004) Code Complete: A Practical Handbook of Software Construction, Second Edition. Microsoft Press. [ISBN: 0790145196705]&lt;/p&gt;</content><category term="book"></category><category term="review"></category><category term="productivity"></category></entry><entry><title>MHI 408-DL: System Acquisition and Lifecycle</title><link href="http://alysivji.github.io/review-mhi408-system-acquisition-and-lifecycle.html" rel="alternate"></link><published>2017-08-25T20:00:00-05:00</published><updated>2017-08-25T20:00:00-05:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-08-25:/review-mhi408-system-acquisition-and-lifecycle.html</id><summary type="html">&lt;p&gt;As part of my degree requirements, I enrolled in &lt;a href="http://sps.northwestern.edu/program-areas/graduate/health-informatics/program-courses.php?course_id=4367&amp;amp;term=4710"&gt;Information System Acquisition and Lifecycle&lt;/a&gt; with Dr. Ray Robinson (TA: Eric Abbott) for the Summer 2017 quarter.&lt;/p&gt;
&lt;p&gt;The course name didn't have me expecting much. I thought I'd put off learning the material until the absolute last moment, procrastating with Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of my degree requirements, I enrolled in &lt;a href="http://sps.northwestern.edu/program-areas/graduate/health-informatics/program-courses.php?course_id=4367&amp;amp;term=4710"&gt;Information System Acquisition and Lifecycle&lt;/a&gt; with Dr. Ray Robinson (TA: Eric Abbott) for the Summer 2017 quarter.&lt;/p&gt;
&lt;p&gt;The course name didn't have me expecting much. I thought I'd put off learning the material until the absolute last moment, procrastating with Python side projects along the way. But that wasn't the case. &lt;strong&gt;At all.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Somehow, through sheer will (and outstanding course design), Dr. Robinson created a class that has been the most engaging and applicable experience of my grad school career.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Course Description&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MHI 408&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://sps.northwestern.edu/program-areas/graduate/health-informatics/program-courses.php?course_id=4367&amp;amp;term=4710"&gt;A practical course on acquiring and assessing new medical technology, either as a vendor who needs to know how to meet the expectations of customers and their acquisition requirements or as a customer/practitioner who must know how to validate technology selections and implementations. Topics include cost analysis and justification, economic models, capital purchase, leasing strategies, the application service provider or risk-sharing model, purchase agreements and contracts, writing a RFP, analyzing a RFP response, and industry business trends.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Workload&lt;/h2&gt;
&lt;p&gt;There are weekly readings and "lectures". Lectures are mostly PowerPoint slides you can go over at your convenience. Not a lot of formal instruction. You would think the tuition I pay would bring more to the table, but it didn't take away from the course.&lt;/p&gt;
&lt;p&gt;All of Northwestern's MHI classes have discussion boards where students interact and learn in a collabrative environment. This quarter's discussion topics ranged from sharing experiences of being on an acquisition team to debating the merits of different open source licenses. This was right around the time &lt;a href="https://www.reddit.com/r/programming/comments/6nnxir/apache_foundation_bans_use_of_facebook_bsdpatents/"&gt;Apache banned the use of BSD+patent libraries&lt;/a&gt;; I had a lot of fun researching and ranting about React.&lt;/p&gt;
&lt;p&gt;The first two weeks of class were hectic with two assignments due right away. Week 2's assignment was long (18-20 hours) and there wasn't much direction from the professor. The topic was to write a Statement of Work and it felt like a consulting engagement. Client expects something at the end of the weekend, you're not quite sure what. Make your best effort to get them what they expect. Seemed to work well enough.&lt;/p&gt;
&lt;p&gt;Courseload lightened up over the next few weeks as we were place into groups for the remaining assignments. Group work is group work. My group was great, so no compliants from me.&lt;/p&gt;
&lt;p&gt;The course built up to a mock negotiation held in the final week of the quarter. Students played the part of either vendor or customer, and negotiated the acquisition of an EHR for a 30 office physician group. This was a lot of fun and helped to reinforce the main themes of the course. &lt;em&gt;Anytown Community Physicians, you may be gone, but you are not forgetten&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Assigned Books&lt;/h2&gt;
&lt;h3&gt;&lt;a href="https://www.amazon.com/Getting-Past-Negotiating-Difficult-Situations/dp/0553371312"&gt;Getting Past No&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Like every great business book, it is just common sense written down. In &lt;em&gt;Getting Past No&lt;/em&gt;, Ury explores the art of joint problem solving. One of the most practical books I've read;  kept thinking of ways that I should play situations to get what I want at work. This book will be on my shelf for years to come.&lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.amazon.com/Software-Agreements-Line-2nd-ed/dp/0314294678"&gt;Software Agreements Line by Line&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dry. Don't think there are too many books in this space. Does the job.&lt;/p&gt;
&lt;h3&gt;Rando Journal Articles&lt;/h3&gt;
&lt;p&gt;No real standout.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Instructors&lt;/h2&gt;
&lt;p&gt;Ray is Awesome. Eric is great.&lt;/p&gt;
&lt;p&gt;They made sure to incorporate the latest and greatest in HealthIT throughout the class. Eric gave a presentation on Blockchain and its Applications in Healthcare. Definitely something I need to explore in the coming months.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Lots of practical knowledge in this course. How to work on an acquisition team, write an RFP, evaluate proposals, negotiate a contract, etc.&lt;/p&gt;
&lt;p&gt;I gave it 6/6 on &lt;a href="http://www.northwestern.edu/ctec/"&gt;CTEC&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Related terms: Masters in Medical Informatics, MMI, Masters in Healthcare Informatics, MHI, Northwestern, Healthcare Information Technology, HealthIT, HIT&lt;/p&gt;</content><category term="review"></category><category term="grad-school"></category></entry><entry><title>Flexing my Public Speaking Muscles</title><link href="http://alysivji.github.io/getting-started-with-public-speaking.html" rel="alternate"></link><published>2017-07-31T23:55:00-05:00</published><updated>2017-07-31T23:55:00-05:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-07-31:/getting-started-with-public-speaking.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;The best way to learn something is to teach someone else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With this in mind, I started creating and presenting technical talks on a variety of subjects: &lt;a href="https://github.com/alysivji/talks/tree/master/201704-healthcare-big-data-analytics"&gt;Big Data in Healthcare&lt;/a&gt;, &lt;a href="https://github.com/alysivji/talks/tree/master/context-manager-intro"&gt;Python language features&lt;/a&gt;, &lt;a href="https://github.com/alysivji/talks/tree/master/201706-knights-tour"&gt;graph algorithms&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;Similiar to how writing about side projects on this blog helped develop my …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;The best way to learn something is to teach someone else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With this in mind, I started creating and presenting technical talks on a variety of subjects: &lt;a href="https://github.com/alysivji/talks/tree/master/201704-healthcare-big-data-analytics"&gt;Big Data in Healthcare&lt;/a&gt;, &lt;a href="https://github.com/alysivji/talks/tree/master/context-manager-intro"&gt;Python language features&lt;/a&gt;, &lt;a href="https://github.com/alysivji/talks/tree/master/201706-knights-tour"&gt;graph algorithms&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;Similiar to how writing about side projects on this blog helped develop my problem solving skills, throwing myself into the deep end by presenting in front of a group of people spurred me to understand my topic in a lot more depth.&lt;/p&gt;
&lt;p&gt;This past Sunday, I gave my first conference talk. Thank you &lt;a href="https://pyohio.org/"&gt;PyOhio&lt;/a&gt; for the opportunity. My topic was &lt;a href="https://github.com/alysivji/talks/tree/master/data-science-workflows-using-docker-containers"&gt;Data Science Workflows using Docker Containers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I added a last minute wrinkle and used the Terminal to live demo my Docker workflow. It was definitely nerve-racking, but it went really well. I had more than a few people come up and thank me for clearing up some of their fuzziness re: Docker. That felt good. If I can help even one person understand, all the hours of preparation were worth it.&lt;/p&gt;
&lt;p&gt;I guess what I'm trying to say is that everyone should give a talk to their peers. It doesn't matter the size of your audience or even the topic itself, the act of preparation will make you a better programmer and help develop your communication skills.&lt;/p&gt;
&lt;p&gt;With PyOhio wrapping up the end of my conference season, I have more time to work on side projects and write this blog. In the meanintime, check out the &lt;a href="https://github.com/alysivji/talks"&gt;GitHub repo of my talks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will post links to the recordings as soon as they are up on YouTube.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;YouTube Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://youtu.be/3CKVOPPqW9Q"&gt;Data Science Workflows using Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hy-O0Qpr_Us"&gt;A Gentle Introduction to Context Managers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;08/01&lt;/strong&gt;: Added link to PyOhio talk&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;08/24&lt;/strong&gt;: Added link to ChiPy talk&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Coding in Containers: 30 Day Challenge</title><link href="http://alysivji.github.io/containerized-development-environments.html" rel="alternate"></link><published>2017-06-28T07:10:00-05:00</published><updated>2017-06-28T07:10:00-05:00</updated><author><name>Aly Sivji</name></author><id>tag:alysivji.github.io,2017-06-28:/containerized-development-environments.html</id><summary type="html">&lt;p&gt;I'm taking an Introduction to Tensorflow training class thru &lt;a href="https://www.safaribooksonline.com/home/"&gt;Safari&lt;/a&gt; this week. We were given a choice of setting up our classroom environment either in Conda or inside of a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container.&lt;/p&gt;
&lt;p&gt;Ever since &lt;a href="https://www.continuum.io/"&gt;Anaconda&lt;/a&gt; started getting in my way during this year's PyCon sprints, I have been moving my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm taking an Introduction to Tensorflow training class thru &lt;a href="https://www.safaribooksonline.com/home/"&gt;Safari&lt;/a&gt; this week. We were given a choice of setting up our classroom environment either in Conda or inside of a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container.&lt;/p&gt;
&lt;p&gt;Ever since &lt;a href="https://www.continuum.io/"&gt;Anaconda&lt;/a&gt; started getting in my way during this year's PyCon sprints, I have been moving my development away from conda and into &lt;a href="http://python-guide.readthedocs.io/en/latest/dev/virtualenvs/"&gt;other virtual environment tools&lt;/a&gt; that are part of the Python ecosystem. Still have conda installed on my system (and, yes, the sticker is still on my laptop), but it needs to be &lt;a href="https://twitter.com/CaiusSivjus/status/867101730986532864"&gt;activated it through a bash function&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;  gogoconda
&lt;span class="go"&gt;Conda is activated&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I'm all in Python 3.6.1, &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;, and &lt;a href="http://virtualenvwrapper.readthedocs.io/en/latest/index.html"&gt;virtualenvwrapper&lt;/a&gt; as part of my default Python install. Even went as far as adding &lt;code&gt;alias python='python3'&lt;/code&gt; and &lt;code&gt;alias pip='pip3'&lt;/code&gt; to the bottom of my &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I really didn't want to go back to Conda for a single workshop, so I decide to fire up Docker and &lt;code&gt;docker build&lt;/code&gt; an image from the provided &lt;code&gt;Dockerfile&lt;/code&gt;. A few minutes (and a &lt;code&gt;docker run&lt;/code&gt;) later, I'm SSH-ed into a container and I notice that the course material are inside of the container with me. That could be a problem... whatever changes I make will disappear once this container is removed.&lt;/p&gt;
&lt;p&gt;As stated in the Docker docs, the best way to store data is through the &lt;a href="https://docs.docker.com/engine/tutorials/dockervolumes/"&gt;use of a data volume&lt;/a&gt;, i.e. a persistent folder on the local machine that is running the Docker Engine. After fixing the &lt;code&gt;Dockerfile&lt;/code&gt; and rebuilding the image, I initialize a new container using the &lt;code&gt;-v /full/path/to/local/folder:/full/path/to/folder/inside/container&lt;/code&gt; flag as part of the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Now, the data inside of my container is actually stored in a folder on my local drive. My development environment, containing all the required dependencies for my project, is completely isolated from everything else on my system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Boom&lt;/strong&gt; 🐳 🐳 🐳&lt;/p&gt;
&lt;p&gt;Portability just like that. No more worrying about hardware failures and having to spend hours getting my system back to the state where &lt;em&gt;everything just worked&lt;/em&gt;. No wonder everyone loves Docker!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;During the month of July, I will be doing &lt;strong&gt;all my development work&lt;/strong&gt; inside of Docker containers. No matter how trivial the task, it will be done inside of a container.&lt;/p&gt;
&lt;p&gt;Not sure how I'm going to do this at work since Docker for Windows requires Win10 and I'm stuck with Win7. Might have to run a Debian VM or use &lt;a href="https://www.docker.com/products/docker-toolbox"&gt;Docker Toolbox&lt;/a&gt;. That's on me.&lt;/p&gt;
&lt;p&gt;I plan to keep semi-detailed notes while I experiment and figure out what workflow works best. Building off a slim base image? Have a "batteries included" ready-to-go container for data analysis projects? Stay tuned!&lt;/p&gt;</content><category term="docker"></category><category term="workflow"></category></entry></feed>